# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle
name: moduda CI/CD

# 이벤트 트리거
on:
  push:
    branches:
      - main
      - develop

# Job
jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: make application-dev.yml
      # branch가 develop일 때
      if: contains(github.ref, 'develop')
      run: |
      # /src/main/resources 위치로 이동
        cd ./src/main/resources
        
        # application-dev.yml파일 생성
        touch ./application-dev.yml
        
        # gitHub secrets에서 설정한 값들을 파일에 작성
        echo "${{ secrets.YML_DEV }}" >./application-dev.yml
      shell: bash

    - name: make application-prod.yml
      if: contains(github.ref, 'main')
      run: |
        cd ./src/main/resources
        touch ./application-prod.yml
        echo "${{ secrets.YML_PROD }}" >./application-prod.yml
      shell: bash

    # build
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    # docker build and push
    - name: Docker build & push to prod
      # branch가 main일 때
      if: contains(github.ref, 'main')
      run: |
      	# docker에 로그인
        docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
        
        # docker파일로 빌드
        docker build -f Dockerfile-prod -t ${{secrets.DOCKER_REPO}}/moduda-prod .
        
        # remote 레포지토리로 push
        docker push ${{secrets.DOCKER_REPO}}/moduda-prod

    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
        docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
        docker build -f Dockerfile-dev -t ${{secrets.DOCKER_REPO}}/moduda-dev .
        docker push ${{secrets.DOCKER_REPO}}/moduda-dev

    # deploy
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO }}/moduda-prod
              docker-compose up -d
              docker image prune -f

    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        #key: ${{ secrets.PRIVATE_KEY }}
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/moduda-dev
            docker-compose up -d
            docker image prune -f
