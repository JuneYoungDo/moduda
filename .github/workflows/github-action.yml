name: Moduda CI/CD

on:
  push:
    branches:
      - main
      - develop

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # jdk 세팅 -> 프로젝트의 버전과 달라도 무관
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle 캐싱 -> 빌드 속도 향상
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # yml 파일 생성
      - name: make application-dev.yml
        if: contains(github.ref, 'develop')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application-dev.yml
          echo "${{ secrets.YML_DEV }}" >./application-dev.yml
        shell: bash

      - name: make application-prod.yml
        if: contains(github.ref, 'main')
        run: |
          mkdir ./src/main/resources
          cd ./src/main/resources
          touch ./application-prod.yml
          echo "${{ secrets.YML_PROD }}" >./application-prod.yml
        shell: bash

      # build
      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # docker build and push
      - name: Docker build & push to prod
        if: contains(github.ref, 'main')
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker build -f Dockerfile-prod -t ${{secrets.DOCKER_USERNAME}}/moduda:prod .
          docker push ${{secrets.DOCKER_USERNAME}}/moduda:prod
          docker logout

      - name: Docker build & push to dev
        if: contains(github.ref, 'develop')
        run: |
          docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
          docker build -f Dockerfile-dev -t ${{secrets.DOCKER_USERNAME}}/moduda:dev .
          docker push ${{secrets.DOCKER_USERNAME}}/moduda:dev
          docker logout

      # deploy
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'main')
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            sudo docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
            sudo docker rm -f moduda-prod
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/moduda:prod
            sudo docker-compose -f docker-compose-prod.yml up -d
            sudo docker image prune -f
            sudo docker logout

      - name: Deploy to dev
        uses: appleboy/ssh-action@master
        id: deploy-dev
        if: contains(github.ref, 'develop')
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            sudo docker login -u ${{secrets.DOCKER_USERNAME}} -p ${{secrets.DOCKER_PASSWORD}}
            sudo docker rm -f moduda-dev
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/moduda:dev
            sudo docker-compose up -d
            sudo docker image prune -f
            sudo docker logout

